---
import { getCollection, getEntry } from 'astro:content';
import Layout from '../../layouts/Layout.astro';
import Footer from '../../components/Footer.astro';
import { Calendar, Clock, Tag, ArrowLeft, Share2 } from 'lucide-astro';

export async function getStaticPaths() {
  const blogPosts = await getCollection('blog');
  return blogPosts.map(post => ({
    params: { slug: post.slug },
    props: { post },
  }));
}

const { post } = Astro.props;
const { Content } = await post.render();

// Format date
const formatDate = (date: Date) => {
  return new Intl.DateTimeFormat('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  }).format(date);
};
---

<Layout 
  title={`${post.data.title} - Dev Cockpit Blog`}
  description={post.data.excerpt}
>
  <main class="min-h-screen py-24 px-4 sm:px-6 lg:px-8">
    <article class="max-w-4xl mx-auto">
      <!-- Back to Blog -->
      <a 
        href="/blog" 
        class="inline-flex items-center gap-2 text-gray-400 hover:text-primary-400 transition-colors mb-8"
      >
        <ArrowLeft className="w-4 h-4" />
        <span>Back to Blog</span>
      </a>

      <!-- Article Header -->
      <header class="mb-12">
        {post.data.featured && (
          <div class="inline-flex items-center gap-2 px-3 py-1 glass rounded-full text-xs text-primary-400 mb-4">
            <span>Featured Post</span>
          </div>
        )}
        
        <h1 class="text-4xl sm:text-5xl font-bold mb-4">
          {post.data.title}
        </h1>
        
        <p class="text-xl text-gray-400 mb-6">
          {post.data.excerpt}
        </p>
        
        <!-- Meta Information -->
        <div class="flex flex-wrap items-center gap-6 text-sm text-gray-500">
          <div class="flex items-center gap-2">
            <Calendar className="w-4 h-4" />
            <span>{formatDate(post.data.date)}</span>
          </div>
          
          <div class="flex items-center gap-2">
            <Clock className="w-4 h-4" />
            <span>{post.data.readTime} read</span>
          </div>
          
          <div class="flex items-center gap-2">
            <span>By {post.data.author}</span>
          </div>
        </div>
        
        <!-- Tags -->
        <div class="flex flex-wrap gap-2 mt-6">
          <span class="inline-flex items-center gap-1 px-3 py-1 glass rounded-lg text-xs">
            <Tag className="w-3 h-3" />
            {post.data.category}
          </span>
          {post.data.tags.map((tag: string) => (
            <span class="px-3 py-1 glass rounded-lg text-xs text-gray-400">
              {tag}
            </span>
          ))}
        </div>
      </header>

      <!-- Featured Image -->
      {post.data.image && (
        <div class="mb-12 rounded-2xl overflow-hidden glass">
          <img 
            src={post.data.image} 
            alt={post.data.title}
            class="w-full h-auto"
            loading="lazy"
          />
        </div>
      )}

      <!-- Article Content -->
      <article class="prose prose-lg prose-invert max-w-none">
        <Content />
      </article>

      <!-- Article Footer -->
      <footer class="mt-16 pt-8 border-t border-white/10">
        <div class="flex items-center justify-between">
          <div>
            <p class="text-gray-400 mb-2">Share this article</p>
            <div class="flex gap-3">
              <button 
                id="share-button"
                class="p-2 glass rounded-lg hover:bg-white/10 transition-colors"
                title="Share this article"
              >
                <Share2 className="w-5 h-5" />
              </button>
              <a 
                href={`https://twitter.com/intent/tweet?text=${encodeURIComponent(post.data.title)}&url=${encodeURIComponent(Astro.url.href)}`}
                target="_blank"
                rel="noopener noreferrer"
                class="p-2 glass rounded-lg hover:bg-white/10 transition-colors"
                title="Share on X (Twitter)"
              >
                <svg class="w-5 h-5" viewBox="0 0 24 24" fill="currentColor">
                  <path d="M18.244 2.25h3.308l-7.227 8.26 8.502 11.24H16.17l-5.214-6.817L4.99 21.75H1.68l7.73-8.835L1.254 2.25H8.08l4.713 6.231zm-1.161 17.52h1.833L7.084 4.126H5.117z"/>
                </svg>
              </a>
              <a 
                href={`https://www.linkedin.com/shareArticle?mini=true&url=${encodeURIComponent(Astro.url.href)}&title=${encodeURIComponent(post.data.title)}&summary=${encodeURIComponent(post.data.excerpt)}&source=${encodeURIComponent('Dev Cockpit')}`}
                target="_blank"
                rel="noopener noreferrer"
                class="p-2 glass rounded-lg hover:bg-white/10 transition-colors"
                title="Share on LinkedIn"
              >
                <svg class="w-5 h-5" viewBox="0 0 24 24" fill="currentColor">
                  <path d="M20.447 20.452h-3.554v-5.569c0-1.328-.027-3.037-1.852-3.037-1.853 0-2.136 1.445-2.136 2.939v5.667H9.351V9h3.414v1.561h.046c.477-.9 1.637-1.85 3.37-1.85 3.601 0 4.267 2.37 4.267 5.455v6.286zM5.337 7.433c-1.144 0-2.063-.926-2.063-2.065 0-1.138.92-2.063 2.063-2.063 1.14 0 2.064.925 2.064 2.063 0 1.139-.925 2.065-2.064 2.065zm1.782 13.019H3.555V9h3.564v11.452zM22.225 0H1.771C.792 0 0 .774 0 1.729v20.542C0 23.227.792 24 1.771 24h20.451C23.2 24 24 23.227 24 22.271V1.729C24 .774 23.2 0 22.222 0h.003z"/>
                </svg>
              </a>
            </div>
          </div>
          
          <a 
            href="/blog" 
            class="inline-flex items-center gap-2 px-6 py-3 glass rounded-xl hover:bg-white/10 transition-colors"
          >
            More Articles
            <ArrowLeft className="w-4 h-4 rotate-180" />
          </a>
        </div>
      </footer>
    </article>
  </main>
  <Footer />
</Layout>

<script>
  // Share functionality
  const shareButton = document.getElementById('share-button');
  
  if (shareButton) {
    shareButton.addEventListener('click', async () => {
      const shareData = {
        title: document.title,
        text: document.querySelector('meta[name="description"]')?.getAttribute('content') || '',
        url: window.location.href
      };
      
      try {
        if (navigator.share) {
          // Use Web Share API if available
          await navigator.share(shareData);
        } else {
          // Fallback to copying URL to clipboard
          await navigator.clipboard.writeText(window.location.href);
          
          // Show tooltip
          const originalTitle = shareButton.title;
          shareButton.title = 'URL copied to clipboard!';
          shareButton.classList.add('bg-green-500/20');
          
          setTimeout(() => {
            shareButton.title = originalTitle;
            shareButton.classList.remove('bg-green-500/20');
          }, 2000);
        }
      } catch (err) {
        console.error('Error sharing:', err);
      }
    });
  }
</script>

<style>
  /* Markdown content styles */
  .prose {
    color: #d1d5db;
  }
  
  .prose :global(h1) {
    color: #f3f4f6;
    font-size: 2.25rem;
    font-weight: 700;
    margin-bottom: 1.5rem;
    margin-top: 2rem;
    scroll-margin-top: 6rem;
  }
  
  .prose :global(h2) {
    color: #f3f4f6;
    font-size: 1.875rem;
    font-weight: 600;
    margin-bottom: 1rem;
    margin-top: 2rem;
    padding-bottom: 0.5rem;
    border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    scroll-margin-top: 6rem;
  }
  
  .prose :global(h3) {
    color: #e5e7eb;
    font-size: 1.5rem;
    font-weight: 600;
    margin-bottom: 0.75rem;
    margin-top: 1.5rem;
    scroll-margin-top: 6rem;
  }
  
  .prose :global(p) {
    color: #d1d5db;
    line-height: 1.75;
    margin-bottom: 1rem;
  }
  
  .prose :global(a) {
    color: #38bdf8;
    text-decoration: none;
    transition: color 0.2s;
  }
  
  .prose :global(a:hover) {
    color: #0ea5e9;
    text-decoration: underline;
  }
  
  .prose :global(ul),
  .prose :global(ol) {
    color: #d1d5db;
    margin-bottom: 1rem;
    padding-left: 1.5rem;
  }
  
  .prose :global(li) {
    margin-bottom: 0.5rem;
  }
  
  .prose :global(ul li)::marker {
    color: #38bdf8;
  }
  
  .prose :global(strong) {
    color: #f3f4f6;
    font-weight: 600;
  }
  
  .prose :global(em) {
    color: #e5e7eb;
    font-style: italic;
  }
  
  .prose :global(blockquote) {
    border-left: 4px solid #38bdf8;
    background-color: rgba(255, 255, 255, 0.05);
    padding: 1rem;
    margin: 1.5rem 0;
    border-radius: 0 0.5rem 0.5rem 0;
    font-style: italic;
    color: #d1d5db;
  }
  
  .prose :global(code) {
    color: #38bdf8;
    background-color: rgba(255, 255, 255, 0.1);
    padding: 0.125rem 0.375rem;
    border-radius: 0.25rem;
    font-family: monospace;
    font-size: 0.875em;
  }
  
  .prose :global(pre) {
    background-color: rgba(0, 0, 0, 0.5);
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: 0.75rem;
    padding: 1rem;
    margin: 1.5rem 0;
    overflow-x: auto;
  }
  
  .prose :global(pre code) {
    background-color: transparent;
    padding: 0;
    color: #e5e7eb;
  }
  
  .prose :global(hr) {
    border-color: rgba(255, 255, 255, 0.1);
    margin: 2rem 0;
  }
  
  .prose :global(img) {
    border-radius: 0.75rem;
    box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.5);
    margin: 1.5rem auto;
    display: block;
  }
  
  .prose :global(table) {
    width: 100%;
    margin: 1.5rem 0;
    border-collapse: collapse;
  }
  
  .prose :global(th) {
    text-align: left;
    color: #f3f4f6;
    font-weight: 600;
    padding: 0.5rem;
    border-bottom: 1px solid rgba(255, 255, 255, 0.2);
  }
  
  .prose :global(td) {
    color: #d1d5db;
    padding: 0.5rem;
    border-bottom: 1px solid rgba(255, 255, 255, 0.1);
  }
</style>